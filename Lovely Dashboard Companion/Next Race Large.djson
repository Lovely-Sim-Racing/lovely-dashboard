{
  "BackgroundColor": "#FF000000",
  "BackgroundOpacity": 100.0,
  "BaseHeight": 50,
  "BaseWidth": 770,
  "DashboardDebugManager": {},
  "EnableClickThroughOverlay": true,
  "EnableOnDashboardMessaging": true,
  "ForegroundOpacity": 100.0,
  "GridSize": 10,
  "HideLabels": false,
  "Id": "49fcb415-0da3-4b8a-92ed-bc27ed12ded2",
  "Images": [],
  "IsOverlay": false,
  "Metadata": {
    "EnableOnDashboardMessaging": true,
    "Height": 50.0,
    "IdleScreensIndexs": [
      0
    ],
    "InGameScreensIndexs": [
      0
    ],
    "IsOverlay": false,
    "MainPreviewIndex": 0,
    "MetadataVersion": 2.0,
    "OverlaySizeWarning": false,
    "PitScreensIndexs": [],
    "ScreenCount": 1.0,
    "SimHubVersion": "9.2.7b1",
    "Width": 770.0
  },
  "Screens": [
    {
      "AllowOverlays": true,
      "BackgroundColor": "#FF000000",
      "IdleScreen": true,
      "InGameScreen": true,
      "IsBackgroundLayer": false,
      "IsForegroundLayer": false,
      "IsOverlayLayer": false,
      "Items": [
        {
          "$type": "SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins",
          "Bindings": {
            "Visible": {
              "Formula": {
                "Expression": "if ( !ld_getSettings('lfmID') ) {\r\n\treturn 0\r\n} else {\r\n\r\n\tlfm_url = 'https://api2.lowfuelmotorsport.com/api/licenseWidgetUserData/' + ld_getSettings('lfmID')\r\n\tconst json_lfm = downloadstringasync(15000, lfm_url)\r\n\t\r\n\t// Break if error in JSON\r\n\tif ( json_lfm == null || json_lfm.startsWith('ERROR') ) { return 0 }\r\n\t\r\n\tconst lfm = JSON.parse(json_lfm)\r\n\r\n\tif ( lfm.race['0'] != null ) {\r\n\t\t// If there is a LFM race\r\n\t\t// Check to see if it's before Pitskill race\r\n\t \t\r\n\t \tpitskill_url = 'https://api.pitskill.io/api/events/upcomingRegistrations?id=' + ld_getSettings('pitskillID')\r\n\t\tconst json_pitskill = downloadstringasync(15000, pitskill_url)\r\n\t\r\n\t\t// Break if error in JSON\r\n\t\tif ( json_pitskill == null ) { return 0 }\r\n\t\r\n\t\tconst pitskill = JSON.parse(json_pitskill)\r\n\t \t\r\n\t \tif ( pitskill.payload == null ) {\r\n\t \t\t// There's no other race\r\n\t \t\treturn 1\r\n\t \t} else {\r\n\t \t\t// There's a Pitskil Race\r\n\t \t\t// Check to see which comes first\r\n\t \t\tlfmTime = new Date(lfm.race['0'].race_date).getTime()\r\n\t \t\tpitSkillTime = new Date(pitskill.payload['0'].start_date).getTime()\r\n\t \t\t\r\n\t \t\treturn ( lfmTime - pitSkillTime < 0 ) ? 1 : 0\r\n\t \t}\r\n\t \t\t \t\r\n\t} else {\r\n\t\t// No Race\r\n\t\treturn 0\r\n\t}\r\n\r\n}",
                "Interpreter": 1,
                "JSExt": 3
              },
              "Mode": 2
            }
          },
          "Childrens": [
            {
              "$type": "SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins",
              "BackgroundColor": "#8C000000",
              "BorderStyle": {
                "RadiusBottomLeft": 4,
                "RadiusBottomRight": 4,
                "RadiusTopLeft": 4,
                "RadiusTopRight": 4
              },
              "Height": 50.0,
              "IsRectangleItem": true,
              "Left": 0.0,
              "MinimumRefreshIntervalMS": 0.0,
              "Name": "RectangleItem",
              "RenderingSkip": 0,
              "Top": 0.0,
              "Visible": true,
              "Width": 770.0
            },
            {
              "$type": "SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins",
              "BackgroundColor": "#00FFFFFF",
              "Bindings": {
                "Text": {
                  "Formula": {
                    "Expression": "if ( ld_getSettings('lfmID') ) {\r\n\t\r\n\tlfm_url = 'https://api2.lowfuelmotorsport.com/api/licenseWidgetUserData/' + ld_getSettings('lfmID')\r\n\tconst json_lfm = downloadstringasync(15000, lfm_url)\r\n\t\r\n\t// Break if error in JSON\r\n\tif ( json_lfm == null ) { return 0 }\r\n\t\r\n\tconst lfm = JSON.parse(json_lfm)\r\n\tif (lfm.race['0'] != null ) {\r\n\t\t// 1 = ACC\r\n\t\t// 2 = rF2\r\n\t\t// 3 = AC\r\n\t\t\r\n\t\tconst sim = (id) => {\r\n\t\t\tswitch (id) {\r\n\t\t\t\tcase 1: \r\n\t\t\t\t\treturn 'LFM : ACC | '\r\n\t\t\t\tcase 2: \r\n\t\t\t\t\treturn 'LFM : rF2 | '\r\n\t\t\t\tcase 3: \r\n\t\t\t\t\treturn 'LFM : AC | '\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\t\r\n\t\treturn sim(lfm.sim.sim_id) + lfm.race['0'].event_name.trim() + ' | #' + lfm.race['0'].race_id + ' | Split ' + lfm.race['0'].split\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n\r\n} else {\r\n\treturn ''\r\n}",
                    "Interpreter": 1,
                    "JSExt": 3
                  },
                  "Mode": 2
                }
              },
              "Font": "Roboto",
              "FontSize": 24.0,
              "FontWeight": "Bold",
              "Height": 30.0,
              "HorizontalAlignment": 0,
              "IsTextItem": true,
              "Left": 110.0,
              "MinimumRefreshIntervalMS": 0.0,
              "Name": "TextItem3",
              "RenderingSkip": 0,
              "ShadowColor": "#FF696969",
              "Text": "LFM | SIM | Upcoming Race Series | #00000 | Split X",
              "TextColor": "#FFFFFFFF",
              "Top": 10.0,
              "VerticalAlignment": 1,
              "Visible": true,
              "Width": 660.0
            },
            {
              "$type": "SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins",
              "BackgroundColor": "#FF141414",
              "Bindings": {
                "Text": {
                  "Formula": {
                    "Expression": "if ( ld_getSettings('lfmID') ) {\r\n\t\r\n\tlfm_url = 'https://api2.lowfuelmotorsport.com/api/licenseWidgetUserData/' + ld_getSettings('lfmID')\r\n\tconst json_lfm = downloadstringasync(15000, lfm_url)\r\n\t\r\n\t// Break if error in JSON\r\n\tif ( json_lfm == null ) { return 0 }\r\n\t\r\n\tconst lfm = JSON.parse(json_lfm)\r\n\t\r\n\tif (lfm.race['0'] != null ) {\r\n\t\tvar raceTime = new Date(lfm.race['0'].race_date).toString()\r\n\t\tvar getRaceTime = new Date(raceTime)\r\n\t\treturn format(getRaceTime.getHours(), '00') + ':' + format(getRaceTime.getMinutes(), '00')\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n\t\r\n} else {\r\n\treturn ''\r\n}",
                    "Interpreter": 1,
                    "JSExt": 3
                  },
                  "Mode": 2
                }
              },
              "BorderStyle": {
                "RadiusBottomLeft": 3,
                "RadiusBottomRight": 3,
                "RadiusTopLeft": 3,
                "RadiusTopRight": 3
              },
              "Font": "Roboto",
              "FontSize": 30.0,
              "FontWeight": "Bold",
              "Height": 50.0,
              "HorizontalAlignment": 1,
              "IsTextItem": true,
              "Left": 0.0,
              "MinimumRefreshIntervalMS": 0.0,
              "Name": "Race Time",
              "RenderingSkip": 0,
              "ShadowColor": "#FF696969",
              "Text": "00:00",
              "TextColor": "#FFFFFFFF",
              "Top": 0.0,
              "VerticalAlignment": 1,
              "Visible": true,
              "Width": 100.0
            },
            {
              "$type": "SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins",
              "BackgroundColor": "#FFFFFFFF",
              "Bindings": {
                "BackgroundColor": {
                  "Formula": {
                    "Expression": "if ( ld_getSettings('lfmID') ) {\r\n\t\r\n\tvar lfm_url = 'https://api2.lowfuelmotorsport.com/api/licenseWidgetUserData/' + ld_getSettings('lfmID')\r\n\tconst json_lfm = downloadstringasync(15000, lfm_url)\r\n\t\r\n\t// Break if error in JSON\r\n\tif ( json_lfm == null ) { return 0 }\r\n\t\r\n\tconst lfm = JSON.parse(json_lfm)\r\n\t\r\n\tif (lfm.race['0'] != null ) {\r\n\t\r\n\t\tconst raceTime = lfm.race['0'].race_date\r\n\t\tvar countdownTo = new Date(raceTime)\r\n\t\tvar now = new Date().getTime()\r\n\t\tvar timeDiff = countdownTo - now\r\n\t\t\t\t\t\r\n\t\tif (timeDiff < 300000) { // Show if under 5 minutes\r\n\t\t\treturn  '#FFFA0000'\r\n\t\t} else {\r\n\t\t\treturn '#FFFFFFFF'\r\n\t\t}\r\n\t\t\r\n\t} else {\r\n\t\treturn 'Transparent'\r\n\t}\r\n \r\n} else {\r\n\treturn '#FFFFFFFF'\r\n}",
                    "Interpreter": 1,
                    "JSExt": 3
                  },
                  "Mode": 2
                },
                "Text": {
                  "Formula": {
                    "Expression": "if ( ld_getSettings('lfmID') ) {\r\n\t\r\n\tlfm_url = 'https://api2.lowfuelmotorsport.com/api/licenseWidgetUserData/' + ld_getSettings('lfmID')\r\n\tconst json_lfm = downloadstringasync(15000, lfm_url)\r\n\t\r\n\t// Break if error in JSON\r\n\tif ( json_lfm == null ) { return 0 }\r\n\t\r\n\tconst lfm = JSON.parse(json_lfm)\r\n\t\r\n\tif (lfm.race['0'] != null ) {\r\n\t\tvar raceTime = lfm.race['0'].race_date\r\n\t\t\r\n\t\tvar countdownTo = new Date(raceTime).getTime();\r\n\t\tvar now = new Date().getTime();\r\n\t\tvar timeDiff = countdownTo - now\r\n\t\t\r\n\t\tif (timeDiff <= 0 ) {\r\n\t\t\treturn 'OPEN'\r\n\t\t} else {\r\n\t\t\tvar days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\r\n\t\t    var hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\t\t\tvar minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));\r\n\t\t\tvar seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);\r\n\t\t\t\r\n\t\t\tvar nextRaceIn = format(minutes, '00') + ':' + format(seconds, '00')\r\n\t\t\treturn nextRaceIn\r\n\t\t}\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n \r\n} else {\r\n\treturn ''\r\n}",
                    "Interpreter": 1,
                    "JSExt": 3
                  },
                  "Mode": 2
                },
                "TextColor": {
                  "Formula": {
                    "Expression": "if ( ld_getSettings('lfmID') ) {\r\n\t\r\n\tlfm_url = 'https://api2.lowfuelmotorsport.com/api/licenseWidgetUserData/' + ld_getSettings('lfmID')\r\n\tconst json_lfm = downloadstringasync(15000, lfm_url)\r\n\t\r\n\t// Break if error in JSON\r\n\tif ( json_lfm == null ) { return 0 }\r\n\t\r\n\tconst lfm = JSON.parse(json_lfm)\r\n\t\r\n\tif (lfm.race['0'] != null ) {\r\n\t\tvar raceTime = lfm.race['0'].race_date\r\n\t\tvar countdownTo = new Date(raceTime)\r\n\t\tvar now = new Date().getTime()\r\n\t\tvar timeDiff = countdownTo - now\r\n\t\t\t\t\t\r\n\t\tif (timeDiff < 300000) { // Show if under 5 minutes\r\n\t\t\treturn  '#FFFFFFFF'\r\n\t\t} else {\r\n\t\t\treturn '#FF000000'\r\n\t\t}\r\n\t} else {\r\n\t\treturn '#FF000000'\r\n\t}\r\n \r\n} else {\r\n\treturn '#FF000000'\r\n}",
                    "Interpreter": 1,
                    "JSExt": 3
                  },
                  "Mode": 2
                },
                "Visible": {
                  "Formula": {
                    "Expression": "if ( ld_getSettings('lfmID') ) {\r\n\r\n\tlfm_url = 'https://api2.lowfuelmotorsport.com/api/licenseWidgetUserData/' + ld_getSettings('lfmID')\r\n\tconst json_lfm = downloadstringasync(15000, lfm_url)\r\n\t\r\n\t// Break if error in JSON\r\n\tif ( json_lfm == null ) { return 0 }\r\n\t\r\n\tconst lfm = JSON.parse(json_lfm)\r\n\t\r\n\tif (lfm.race['0'] != null ) {\r\n\t\t\t\r\n\t\tvar raceTime = lfm.race['0'].race_date\r\n\t\tvar countdownTo = new Date(raceTime)\r\n\t\tvar now = new Date().getTime()\r\n\t\tvar timeDiff = countdownTo - now\r\n\t\t\t\t\t\r\n\t\tif (timeDiff < 1800000 && timeDiff > -120000) { // Show if under 30 min AND over 2 min\r\n\t\t\treturn 1\r\n\t\t} else {\r\n\t\t\treturn 0\r\n\t\t}\r\n\t\t\r\n\t} else {\r\n\t\treturn 0\r\n\t}\r\n \r\n} else {\r\n\treturn 0\r\n}",
                    "Interpreter": 1,
                    "JSExt": 3
                  },
                  "Mode": 2
                }
              },
              "BorderStyle": {
                "RadiusBottomLeft": 3,
                "RadiusBottomRight": 3,
                "RadiusTopLeft": 3,
                "RadiusTopRight": 3
              },
              "Font": "Roboto",
              "FontSize": 30.0,
              "FontWeight": "Bold",
              "Height": 50.0,
              "HorizontalAlignment": 1,
              "IsTextItem": true,
              "Left": 0.0,
              "MinimumRefreshIntervalMS": 0.0,
              "Name": "Countdown",
              "RenderingSkip": 0,
              "ShadowColor": "#FF696969",
              "Text": "00:00",
              "TextColor": "#FF000000",
              "Top": 0.0,
              "VerticalAlignment": 1,
              "Visible": false,
              "Width": 100.0
            }
          ],
          "Group": true,
          "MinimumRefreshIntervalMS": 2560.0,
          "Name": "Next LFM Race",
          "RenderingSkip": 256,
          "Repetitions": 0,
          "Visible": false
        },
        {
          "$type": "SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins",
          "Bindings": {
            "Visible": {
              "Formula": {
                "Expression": "if ( !ld_getSettings('pitskillID') ) {\r\n\treturn 0\r\n} else {\r\n\r\n\tpitskill_url = 'https://api.pitskill.io/api/events/upcomingRegistrations?id=' + ld_getSettings('pitskillID')\r\n\tconst json_pitskill = downloadstringasync(15000, pitskill_url)\r\n\r\n\t// Break if error in JSON\r\n\tif ( json_pitskill == null || json_pitskill.startsWith('ERROR') ) { return 0 }\r\n\t\r\n\tconst pitskill = JSON.parse(json_pitskill)\r\n\tif ( pitskill.payload != null ) {\r\n\t\t// If there is a Pitskill race\r\n\t\t// Check to see if it's before LFM race\r\n\t\tlfm_url = 'https://api2.lowfuelmotorsport.com/api/licenseWidgetUserData/' + ld_getSettings('lfmID')\r\n\t\tconst json_lfm = downloadstringasync(15000, lfm_url)\r\n\t\t\r\n\t\t// Break if error in JSON\r\n\t\tif ( json_lfm == null ) { return 0 }\r\n\t\t\r\n\t\tconst lfm = JSON.parse(json_lfm)\r\n\t\tif ( lfm.race['0'] == null ) {\r\n\t \t\t// There's no other race\r\n\t \t\treturn 1\r\n\t \t} else {\r\n\t \t\t// There's an LFM Race\r\n\t \t\t// Check to see which comes first\r\n\t \t\tlfmTime = new Date(lfm.race['0'].race_date).getTime()\r\n\t \t\tpitSkillTime = new Date(pitskill.payload['0'].start_date).getTime()\r\n\t \t\t\r\n\t \t\treturn ( pitSkillTime - lfmTime < 0 ) ? 1 : 0\r\n\t \t}\r\n\t\r\n\t} else {\r\n\t\t// No Race\r\n\t\treturn 0\r\n\t}\r\n}",
                "Interpreter": 1,
                "JSExt": 1
              },
              "Mode": 2
            }
          },
          "Childrens": [
            {
              "$type": "SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins",
              "BackgroundColor": "#8C000000",
              "BorderStyle": {
                "RadiusBottomLeft": 4,
                "RadiusBottomRight": 4,
                "RadiusTopLeft": 4,
                "RadiusTopRight": 4
              },
              "Height": 50.0,
              "IsRectangleItem": true,
              "Left": 0.0,
              "MinimumRefreshIntervalMS": 0.0,
              "Name": "RectangleItem",
              "RenderingSkip": 0,
              "Top": 0.0,
              "Visible": true,
              "Width": 770.0
            },
            {
              "$type": "SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins",
              "BackgroundColor": "#00FFFFFF",
              "Bindings": {
                "Text": {
                  "Formula": {
                    "Expression": "if ( ld_getSettings('pitskillID') ) {\r\n\t\r\n\tpitskill_url = 'https://api.pitskill.io/api/events/upcomingRegistrations?id=' + ld_getSettings('pitskillID')\r\n\tconst json_pitskill = downloadstringasync(15000, pitskill_url)\r\n\t\r\n\t// Break if error in JSON\r\n\tif ( json_pitskill == null ) { return 0 }\r\n\t\r\n\tconst pitskill = JSON.parse(json_pitskill)\r\n\t\r\n\tif ( pitskill.payload != null ) {\r\n\t\t\r\n\t\treturn pitskill.payload['0'].event_registrations['0'].vehicle_registration.server.server_name + ' | PW: ' + pitskill.payload['0'].event_registrations['0'].vehicle_registration.server.server_password\r\n\t\t\t\t\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n\r\n} else {\r\n\treturn ''\r\n}",
                    "Interpreter": 1,
                    "JSExt": 3
                  },
                  "Mode": 2
                }
              },
              "Font": "Roboto",
              "FontSize": 24.0,
              "FontWeight": "Bold",
              "Height": 30.0,
              "HorizontalAlignment": 0,
              "IsTextItem": true,
              "Left": 110.0,
              "MinimumRefreshIntervalMS": 0.0,
              "Name": "TextItem3",
              "RenderingSkip": 0,
              "ShadowColor": "#FF696969",
              "Text": "Pitskill.io | Upcoming Race Series - Week 7 - 6 - Split X | #0000 | PW: 00000",
              "TextColor": "#FFFFFFFF",
              "Top": 10.0,
              "VerticalAlignment": 1,
              "Visible": true,
              "Width": 660.0
            },
            {
              "$type": "SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins",
              "BackgroundColor": "#FF141414",
              "Bindings": {
                "Text": {
                  "Formula": {
                    "Expression": "if ( ld_getSettings('pitskillID') ) {\r\n\t\r\n\tpitskill_url = 'https://api.pitskill.io/api/events/upcomingRegistrations?id=' + ld_getSettings('pitskillID')\r\n\tconst json_pitskill = downloadstringasync(15000, pitskill_url)\r\n\t\r\n\t// Break if error in JSON\r\n\tif ( json_pitskill == null ) { return 0 }\r\n\t\r\n\tconst pitskill = JSON.parse(json_pitskill)\r\n\t\r\n\tif ( pitskill.payload != null ) {\r\n\t\tvar raceTime = new Date(pitskill.payload['0'].start_date).toString()\r\n\t\tvar getRaceTime = new Date(raceTime)\r\n\t\treturn format(getRaceTime.getHours(), '00') + ':' + format(getRaceTime.getMinutes(), '00')\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n\t\r\n} else {\r\n\treturn ''\r\n}",
                    "Interpreter": 1,
                    "JSExt": 3
                  },
                  "Mode": 2
                }
              },
              "BorderStyle": {
                "RadiusBottomLeft": 3,
                "RadiusBottomRight": 3,
                "RadiusTopLeft": 3,
                "RadiusTopRight": 3
              },
              "Font": "Roboto",
              "FontSize": 30.0,
              "FontWeight": "Bold",
              "Height": 50.0,
              "HorizontalAlignment": 1,
              "IsTextItem": true,
              "Left": 0.0,
              "MinimumRefreshIntervalMS": 0.0,
              "Name": "Race Time",
              "RenderingSkip": 0,
              "ShadowColor": "#FF696969",
              "Text": "00:00",
              "TextColor": "#FFFFFFFF",
              "Top": 0.0,
              "VerticalAlignment": 1,
              "Visible": true,
              "Width": 100.0
            },
            {
              "$type": "SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins",
              "BackgroundColor": "#FFFFFFFF",
              "Bindings": {
                "BackgroundColor": {
                  "Formula": {
                    "Expression": "if ( ld_getSettings('pitskillID') ) {\r\n\t\r\n\tpitskill_url = 'https://api.pitskill.io/api/events/upcomingRegistrations?id=' + ld_getSettings('pitskillID')\r\n\tconst json_pitskill = downloadstringasync(15000, pitskill_url)\r\n\t\r\n\t// Break if error in JSON\r\n\tif ( json_pitskill == null ) { return 0 }\r\n\t\r\n\tconst pitskill = JSON.parse(json_pitskill)\r\n\t\r\n\tif ( pitskill.payload != null ) {\r\n\t\r\n\t\tconst raceTime = pitskill.payload['0'].start_date\r\n\t\tvar countdownTo = new Date(raceTime)\r\n\t\tvar now = new Date().getTime()\r\n\t\tvar timeDiff = countdownTo - now\r\n\t\t\t\t\t\r\n\t\tif (timeDiff < 300000) { // Show if under 5 minutes\r\n\t\t\treturn  '#FFFA0000'\r\n\t\t} else {\r\n\t\t\treturn '#FFFFFFFF'\r\n\t\t}\r\n\t\t\r\n\t} else {\r\n\t\treturn 'Transparent'\r\n\t}\r\n \r\n} else {\r\n\treturn '#FFFFFFFF'\r\n}",
                    "Interpreter": 1,
                    "JSExt": 3
                  },
                  "Mode": 2
                },
                "Text": {
                  "Formula": {
                    "Expression": "if ( ld_getSettings('pitskillID') ) {\r\n\t\r\n\tpitskill_url = 'https://api.pitskill.io/api/events/upcomingRegistrations?id=' + ld_getSettings('pitskillID')\r\n\tconst json_pitskill = downloadstringasync(15000, pitskill_url)\r\n\t\r\n\t// Break if error in JSON\r\n\tif ( json_pitskill == null ) { return 0 }\r\n\t\r\n\tconst pitskill = JSON.parse(json_pitskill)\r\n\t\r\n\tif ( pitskill.payload != null ) {\r\n\t\tvar raceTime = pitskill.payload['0'].start_date\r\n\t\t\r\n\t\tvar countdownTo = new Date(raceTime).getTime();\r\n\t\tvar now = new Date().getTime();\r\n\t\tvar timeDiff = countdownTo - now\r\n\t\t\r\n\t\tif (timeDiff <= 0 ) {\r\n\t\t\treturn 'OPEN'\r\n\t\t} else {\r\n\t\t\tvar days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\r\n\t\t    var hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\t\t\tvar minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));\r\n\t\t\tvar seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);\r\n\t\t\t\r\n\t\t\tvar nextRaceIn = format(minutes, '00') + ':' + format(seconds, '00')\r\n\t\t\treturn nextRaceIn\r\n\t\t}\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n \r\n} else {\r\n\treturn ''\r\n}",
                    "Interpreter": 1,
                    "JSExt": 3
                  },
                  "Mode": 2
                },
                "TextColor": {
                  "Formula": {
                    "Expression": "if ( ld_getSettings('pitskillID') ) {\r\n\t\r\n\tpitskill_url = 'https://api.pitskill.io/api/events/upcomingRegistrations?id=' + ld_getSettings('pitskillID')\r\n\tconst json_pitskill = downloadstringasync(15000, pitskill_url)\r\n\t\r\n\t// Break if error in JSON\r\n\tif ( json_pitskill == null ) { return 0 }\r\n\t\r\n\tconst pitskill = JSON.parse(json_pitskill)\r\n\t\r\n\tif ( pitskill.payload != null ) {\r\n\t\tvar raceTime = pitskill.payload['0'].start_date\r\n\t\tvar countdownTo = new Date(raceTime)\r\n\t\tvar now = new Date().getTime()\r\n\t\tvar timeDiff = countdownTo - now\r\n\t\t\t\t\t\r\n\t\tif (timeDiff < 300000) { // Show if under 5 minutes\r\n\t\t\treturn  '#FFFFFFFF'\r\n\t\t} else {\r\n\t\t\treturn '#FF000000'\r\n\t\t}\r\n\t} else {\r\n\t\treturn '#FF000000'\r\n\t}\r\n \r\n} else {\r\n\treturn '#FF000000'\r\n}",
                    "Interpreter": 1,
                    "JSExt": 3
                  },
                  "Mode": 2
                },
                "Visible": {
                  "Formula": {
                    "Expression": "if ( ld_getSettings('pitskillID') ) {\r\n\t\r\n\tpitskill_url = 'https://api.pitskill.io/api/events/upcomingRegistrations?id=' + ld_getSettings('pitskillID')\r\n\tconst json_pitskill = downloadstringasync(15000, pitskill_url)\r\n\t\r\n\t// Break if error in JSON\r\n\tif ( json_pitskill == null ) { return 0 }\r\n\t\r\n\tconst pitskill = JSON.parse(json_pitskill)\r\n\t\r\n\tif ( pitskill.payload != null ) {\r\n\t\tvar raceTime = pitskill.payload['0'].start_date\r\n\t\tvar countdownTo = new Date(raceTime)\r\n\t\tvar now = new Date().getTime()\r\n\t\tvar timeDiff = countdownTo - now\r\n\t\t\t\t\t\r\n\t\tif (timeDiff < 1800000 && timeDiff > -120000) { // Show if under 30 min AND over 2 min\r\n\t\t\treturn 1\r\n\t\t} else {\r\n\t\t\treturn 0\r\n\t\t}\r\n\t} else {\r\n\t\treturn 0\r\n\t}\r\n \r\n} else {\r\n\treturn 0\r\n}",
                    "Interpreter": 1,
                    "JSExt": 3
                  },
                  "Mode": 2
                }
              },
              "BorderStyle": {
                "RadiusBottomLeft": 3,
                "RadiusBottomRight": 3,
                "RadiusTopLeft": 3,
                "RadiusTopRight": 3
              },
              "Font": "Roboto",
              "FontSize": 30.0,
              "FontWeight": "Bold",
              "Height": 50.0,
              "HorizontalAlignment": 1,
              "IsTextItem": true,
              "Left": 0.0,
              "MinimumRefreshIntervalMS": 0.0,
              "Name": "Countdown",
              "RenderingSkip": 0,
              "ShadowColor": "#FF696969",
              "Text": "00:00",
              "TextColor": "#FF000000",
              "Top": 0.0,
              "VerticalAlignment": 1,
              "Visible": true,
              "Width": 100.0
            }
          ],
          "Group": true,
          "MinimumRefreshIntervalMS": 2560.0,
          "Name": "Next Pitskill Race",
          "RenderingSkip": 256,
          "Repetitions": 0,
          "Visible": false
        }
      ],
      "MinimumRefreshIntervalMS": 0.0,
      "Name": "Screen",
      "OverlayMaxDuration": 0,
      "OverlayMinDuration": 0,
      "OverlayTriggerExpression": {
        "Expression": ""
      },
      "PitScreen": false,
      "RenderingSkip": 0,
      "ScreenEnabledExpression": {
        "Expression": ""
      },
      "ScreenId": "fb809a1a-3df7-444b-b24e-3996bcb227fa"
    }
  ],
  "ShowBackground": true,
  "ShowBoundingRectangles": false,
  "ShowForeground": true,
  "ShowOnScreenControls": true,
  "SnapToGrid": false,
  "Variables": {
    "DashboardVariables": [
      {
        "EvaluateBeforeScreenRoles": false,
        "EvaluateOnlyOnce": false,
        "OverrideWithParentDashboardVariableWhenAvailable": true,
        "ValueExpression": {
          "Expression": ""
        },
        "VariableName": "folderName"
      }
    ]
  },
  "Version": 2
}
